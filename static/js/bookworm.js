// Generated by CoffeeScript 1.5.0
(function() {
  var APIManager, Bookworm, Chart, ColorManager, Filter, MetaField, MetaValue, Query, State, UIManager, bookworm, optionsLoaded, windowLoaded, xOption, yOption,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  windowLoaded = $.Deferred();

  optionsLoaded = $.Deferred();

  xOption = (function() {

    function xOption(name, val, unit, range) {
      this.name = name;
      this.val = val;
      this.unit = unit;
      this.range = range;
    }

    return xOption;

  })();

  yOption = (function() {

    function yOption(name, val) {
      this.name = name;
      this.val = val;
    }

    return yOption;

  })();

  ColorManager = (function() {

    function ColorManager() {
      this.defaultColors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"];
      this.colors = this.defaultColors.slice(0);
      this.id = 0;
    }

    ColorManager.prototype.getColor = function() {
      console.log(this.colors);
      if (this.colors.length === 0) {
        return "#999999";
      } else {
        return this.colors.shift();
      }
    };

    ColorManager.prototype.returnColor = function(color) {
      if (!(__indexOf.call(this.colors, color) >= 0)) {
        return this.colors.unshift(color);
      }
    };

    return ColorManager;

  })();

  MetaField = (function() {

    function MetaField(name, id, values) {
      this.name = name;
      this.id = id;
      this.values = values;
    }

    return MetaField;

  })();

  MetaValue = (function() {

    function MetaValue(name, id) {
      this.name = name;
      this.id = id;
    }

    return MetaValue;

  })();

  Filter = (function() {

    function Filter(field, value) {
      this.field = field;
      this.value = value;
    }

    return Filter;

  })();

  Query = (function() {

    function Query(ngram, filters, colorManager) {
      this.destroy = __bind(this.destroy, this);      this.ngram = ngram;
      this.filters = filters;
      this.colorManager = colorManager;
      this.color = this.colorManager.getColor();
      this.id = this.colorManager.id++;
    }

    Query.prototype.destroy = function() {
      return this.colorManager.returnColor(this.color);
    };

    return Query;

  })();

  State = (function() {

    function State(db, x, smoothing, caseSensitive) {
      if (smoothing == null) {
        smoothing = 4;
      }
      if (caseSensitive == null) {
        caseSensitive = false;
      }
      this.addQuery = __bind(this.addQuery, this);
      this.getQueryIndex = __bind(this.getQueryIndex, this);
      this.state = "loading";
      this.database = db;
      this.queries = [];
      this.smoothing = smoothing;
      this.caseSensitive = caseSensitive;
      this.xAxis = x;
      this.yAxis = new yOption("percent of texts", "Percentage_of_Books");
      if (this.database === "ssrn") {
        this.xRange = [731084, 735264];
      } else if (this.database === "arxiv") {
        this.xRange = [729053, 735305];
      } else {
        this.xRange = x.range;
      }
      this.data = [];
    }

    State.prototype.changeState = function(newState) {
      if (this.state === newState) {

      }
    };

    State.prototype.getQueryIndex = function(id) {
      var i, query;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.queries;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          query = _ref[i];
          if (query.id === id) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this))[0];
    };

    State.prototype.addQuery = function(query) {
      return this.queries.push(query);
    };

    State.prototype.duplicateQuery = function(query) {
      var f, i, newQuery;
      newQuery = new Query(query.ngram, (function() {
        var _i, _len, _ref, _results;
        _ref = query.filters;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          _results.push(f);
        }
        return _results;
      })(), query.colorManager);
      i = this.getQueryIndex(query.id);
      this.queries.splice(i + 1, 0, newQuery);
      return newQuery;
    };

    State.prototype.removeQuery = function(query) {
      query.destroy();
      return this.queries.splice($.inArray(query, this.queries), 1);
    };

    return State;

  })();

  APIManager = (function() {
    var get_sorted_month, get_sorted_other, get_sorted_year;

    function APIManager() {}

    get_sorted_year = function(seriesvalues) {
      var k, mmm, ummm, v;
      mmm = (function() {
        var _results;
        _results = [];
        for (k in seriesvalues) {
          v = seriesvalues[k];
          _results.push([Date.UTC(k, 0, 1), v]);
        }
        return _results;
      })();
      ummm = mmm.sort(function(a, b) {
        return a[0] - b[0];
      });
      return ummm;
    };

    get_sorted_month = function(seriesvalues) {
      var k, mmm, ummm, v;
      mmm = (function() {
        var _results;
        _results = [];
        for (k in seriesvalues) {
          v = seriesvalues[k];
          _results.push([Date.UTC(-1, 12, k), v]);
        }
        return _results;
      })();
      ummm = mmm.sort(function(a, b) {
        return a[0] - b[0];
      });
      return ummm;
    };

    get_sorted_other = function(seriesvalues) {
      var k, mmm, ummm, v;
      mmm = (function() {
        var _results;
        _results = [];
        for (k in seriesvalues) {
          v = seriesvalues[k];
          _results.push([parseInt(k), v]);
        }
        return _results;
      })();
      ummm = mmm.sort(function(a, b) {
        return a[0] - b[0];
      });
      return ummm;
    };

    APIManager.prototype.parseState = function(state) {
      "Parses an internal state into the API format and returns it";
      var filter, limit, limits, query, queryBundle, _i, _j, _len, _len1, _ref, _ref1;
      limits = [];
      _ref = state.queries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        query = _ref[_i];
        limit = {
          word: [query.ngram]
        };
        limit[state.xAxis.val] = {
          "$gt": state.xRange[0],
          "$lt": state.xRange[1]
        };
        _ref1 = query.filters;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          filter = _ref1[_j];
          if (limit[filter.field.id] != null) {
            limit[filter.field.id].push(filter.value.id);
          } else {
            limit[filter.field.id] = [filter.value.id];
          }
        }
        limits.push(limit);
      }
      queryBundle = {
        search_limits: limits,
        counttype: state.yAxis.val,
        words_collation: state.caseSensitive ? "Case_Sensitive" : "Case_Insensitive",
        smoothingSpan: state.smoothing,
        database: state.database,
        method: "return_query_values",
        groups: [state.xAxis.val]
      };
      return queryBundle;
    };

    APIManager.prototype.parsePoint = function(state, point) {};

    APIManager.prototype.processCounts = function(state, counts) {
      "Processes the counts into highcharts-readable format";
      var data, i, series, _i, _j, _k, _len, _len1, _len2;
      counts = eval(counts.split('===RESULT===')[1]);
      data = [];
      if (state.xAxis.unit === "year" || state.xAxis.unit === "date_year") {
        for (i = _i = 0, _len = counts.length; _i < _len; i = ++_i) {
          series = counts[i];
          data.push({
            name: series.Name,
            data: get_sorted_year(series.values),
            color: state.queries[i].color,
            id: state.queries[i].id
          });
        }
      } else if (state.xAxis.unit === "month" || state.xAxis.unit === "date_month") {
        for (i = _j = 0, _len1 = counts.length; _j < _len1; i = ++_j) {
          series = counts[i];
          data.push({
            name: series.Name,
            data: get_sorted_month(series.values),
            color: state.queries[i].color,
            id: state.queries[i].id
          });
        }
      } else {
        for (i = _k = 0, _len2 = counts.length; _k < _len2; i = ++_k) {
          series = counts[i];
          data.push({
            name: series.Name,
            data: get_sorted_other(series.values),
            color: state.queries[i].color,
            id: state.queries[i].id
          });
        }
      }
      return data;
    };

    APIManager.prototype.getCounts = function(state) {
      "Gets the ngram counts for the given internal state";      return $.ajax({
        url: '/cgi-bin/dbbindings.py',
        data: {
          queryTerms: JSON.stringify(this.parseState(state))
        }
      });
    };

    APIManager.prototype.getTexts = function(state, point) {
      "Gets a random sample of texts for a particular point";      return $.ajax({
        url: '/cgi-bin/dbbindings.py',
        data: {
          queryTerms: JSON.stringify(this.parsePoint(state, point))
        }
      });
    };

    APIManager.prototype.getOptions = function() {
      "Gets the front-end options";      return $.ajax({
        url: 'static/options/options.json'
      });
    };

    APIManager.prototype.processOptions = function(options, colorManager) {
      var des, field, filters, initialsearches, meta, metadata, metafield, metavalue, o, search, v, value, values, x, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
      o = {
        settings: options["settings"],
        xOptions: (function() {
          var _i, _len, _ref, _results;
          _ref = options["ui_components"];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            if (x.type === "time") {
              _results.push(new xOption(x.name, x.dbfield, x.unit, x.range, x.initial));
            }
          }
          return _results;
        })(),
        metadata: [],
        queries: []
      };
      metadata = (function() {
        var _i, _len, _ref, _results;
        _ref = options["ui_components"];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          x = _ref[_i];
          if (x.type === "categorical") {
            _results.push(x);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = metadata.length; _i < _len; _i++) {
        meta = metadata[_i];
        des = meta["categorical"]["descriptions"];
        values = (function() {
          var _j, _len1, _ref, _results;
          _ref = meta["categorical"]["sort_order"];
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            v = _ref[_j];
            _results.push(new MetaValue((des[v].shortname != null ? des[v].shortname : des[v].name), des[v].dbcode));
          }
          return _results;
        })();
        o.metadata.push(new MetaField(meta.name, meta.dbfield, values));
      }
      initialsearches = options["default_search"][Math.floor(Math.random() * options["default_search"].length)];
      _ref = initialsearches["search_limits"];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        search = _ref[_j];
        filters = [];
        for (field in search) {
          value = search[field];
          if (field !== "word") {
            _ref1 = o.metadata;
            for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
              x = _ref1[_k];
              if (x.id === field) {
                metafield = x;
              }
            }
            _ref2 = metafield.values;
            for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
              x = _ref2[_l];
              if (x.id === value[0]) {
                metavalue = x;
              }
            }
            filters.push(new Filter(metafield, metavalue));
          }
        }
        o.queries.push(new Query(search["word"][0], filters, colorManager));
      }
      return o;
    };

    return APIManager;

  })();

  UIManager = (function() {

    function UIManager(bookworm, state, xOptions) {
      var query, _i, _len, _ref,
        _this = this;
      this.bookworm = bookworm;
      this.state = state;
      _ref = state.queries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        query = _ref[_i];
        $("#meta .queries").append(this.getQueryHtml(query));
      }
      $(".smoothing .no").text(this.state.smoothing);
      $("#smoothing").slider({
        min: 0,
        max: 14,
        value: 4,
        slide: function(event, ui) {
          _this.state.smoothing = _this.smoothingUnits(ui.value);
          $(".smoothing .no").text(_this.state.smoothing);
          $("#meta").click();
          return console.log($("#meta"));
        }
      });
      $(".link.getlink").click(function() {
        return _this.dialog("In Progress", "Settings", 600);
      });
      $(".link.info").click(function() {
        return _this.dialog("Bookworm enables you to graphically explore lexical trends across a huge digital library.", "Information");
      });
      $(document).on("click", "#meta .queries .query .filter", function(event) {
        var fc, i, meta, target;
        target = $(event.target);
        i = _this.state.getQueryIndex(target.data("query-id"));
        query = _this.state.queries[i];
        meta = $($("#meta .queries .query")[i]).find(".metadata-selection").html(_this.getMetaHtml(query));
        $(".chzn-select").chosen();
        $(".chzn-select").each(function() {
          return $(this).data("chosen-values", $(this).val());
        });
        $(".chzn-select").change(function(e) {
          var added, deleted, f, field, filter, iF, n, o, v, x, _j, _k, _l, _len1, _len2, _len3, _ref1, _ref2, _ref3;
          field = $(e.target);
          o = (field.data("chosen-values")) != null ? field.data("chosen-values") : [];
          n = field.val() != null ? field.val() : [];
          if (query.filters.length === 0) {
            $($("#meta .queries .query")[i]).find(".filter").remove();
          }
          if (o.length > n.length) {
            deleted = _.difference(o, n)[0];
            filter = ((function() {
              var _j, _len1, _ref1, _results;
              _ref1 = query.filters;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                x = _ref1[_j];
                if (x.value.id + "" === deleted + "") {
                  _results.push(x);
                }
              }
              return _results;
            })())[0];
            iF = query.filters.indexOf(filter);
            query.filters.splice(iF, 1);
            if (query.filters.length === 0) {
              $("<span />").text("All").addClass("filter").appendTo($($("#meta .queries .query")[i]).children(".filters"));
            }
            _ref1 = $($($("#meta .queries .query")[i]).find(".filter"));
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              f = _ref1[_j];
              if ($(f).data("query-id") === query.id && $(f).data("field-id") + "" === filter.field.id + "" && $(f).data("value-id") + "" === filter.value.id + "") {
                $(f).remove();
              }
            }
          } else if (o.length < n.length) {
            added = _.difference(n, o)[0];
            _ref2 = _this.bookworm.metadata;
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              x = _ref2[_k];
              if (x.id + "" === field.data("id")) {
                f = x;
              }
            }
            _ref3 = f.values;
            for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
              x = _ref3[_l];
              if (x.id + "" === added + "") {
                v = x;
              }
            }
            filter = new Filter(f, v);
            query.filters.push(filter);
            $("<span />").text(filter.value.name).addClass("filter").data("field-id", filter.field.id).data("value-id", filter.value.id).data("query-id", query.id).appendTo($($("#meta .queries .query")[i]).children(".filters"));
          }
          return field.data("chosen-values", n);
        });
        fc = $("<div />").addClass("clear").appendTo(meta);
        meta.children(".metadata").fadeIn(200);
        fc.show();
        return fc.click(function() {
          fc.remove();
          return meta.children(".metadata").fadeOut(200);
        });
      });
    }

    UIManager.prototype.smoothingUnits = function(val) {
      return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 24, 36][val];
    };

    UIManager.prototype.setHeader = function(sourcename, sourceurl, itemname) {
      $("#header .title .current").text(sourcename);
      $("#header .subtitle .itemName").text(itemname);
      $("#header .subtitle .source").attr('href', "http://" + sourceurl);
      return $("<span />").addClass("current").text(sourceurl).appendTo($("#header .subtitle .source"));
    };

    UIManager.prototype.setXDateLabel = function(timename) {
      return $("#chart .x-axis .label").text(timename);
    };

    UIManager.prototype.addXOption = function(xOption) {
      return $("<div />").addClass("option").text(xOption.name).appendTo($(".x-axis .dropdown"));
    };

    UIManager.prototype.selectXOption = function(xOption) {
      $("#chart .x-axis .label").text(xOption.name);
      return $("#full-clear").click();
    };

    UIManager.prototype.showXOptions = function() {
      var _this = this;
      $("#chart .x-axis .dropdown, #full-clear").show();
      return $("#full-clear").click(function() {
        $("#chart .x-axis .dropdown, #full-clear").hide();
        return $("#full-clear").unbind("click");
      });
    };

    UIManager.prototype.getMetaHtml = function(query) {
      var field, html, m, v, value, values, x, _i, _j, _len, _len1, _ref, _ref1;
      html = $("<div />").addClass("metadata");
      _ref = this.bookworm.metadata;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        m = $("<div />").addClass("field");
        $("<div />").addClass("label").text(field.name).appendTo(m);
        values = $("<select multiple />").addClass("values chzn-select").attr("data-placeholder", "All").data("name", field.name).data("id", field.id);
        _ref1 = field.values;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          value = _ref1[_j];
          v = $("<option />").addClass("values").html(value.name).val(value.id);
          if (((function() {
            var _k, _len2, _ref2, _results;
            _ref2 = query.filters;
            _results = [];
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              x = _ref2[_k];
              if (x.field.id === field.id && x.value.id === value.id) {
                _results.push(x);
              }
            }
            return _results;
          })()).length !== 0) {
            v.attr('selected', 'selected');
          }
          v.appendTo(values);
        }
        values.appendTo(m);
        m.appendTo(html);
      }
      return html;
    };

    UIManager.prototype.getQueryHtml = function(query) {
      "Returns the HTML for a query";
      var filter, filters, html, _i, _len, _ref,
        _this = this;
      html = $("<div />").addClass("query").attr("data-id", query.id);
      $("<span />").addClass("color").css("background-color", query.color).appendTo(html);
      $("<input />").val(query.ngram).addClass("ngram").appendTo(html).change(function(e) {
        return query.ngram = $(e.target).val();
      });
      $("<span />").text("in").addClass("in").appendTo(html);
      filters = $("<div />").addClass("filters");
      $("<div />").addClass("metadata-selection").appendTo(filters);
      if (query.filters.length === 0) {
        $("<span />").text("All texts").addClass("filter").appendTo(filters);
      } else {
        _ref = query.filters;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          filter = _ref[_i];
          $("<span />").text(filter.field.name + ": " + filter.value.name).addClass("filter").data("field-id", filter.field.id).data("value-id", filter.value.id).data("query-id", query.id).appendTo(filters);
        }
      }
      filters.appendTo(html);
      $("<span />").text("X words").addClass("corpus").appendTo(html);
      $("<span />").html("+").addClass("add").appendTo(html).click(function(e) {
        var newQuery;
        newQuery = _this.state.duplicateQuery(query);
        html.after(_this.getQueryHtml(newQuery).hide());
        return html.next().slideDown(200, function() {
          return $(this).css("overflow", "visible");
        });
      });
      $("<span />").html("&times;").addClass("remove").appendTo(html).click(function(e) {
        if (_this.state.queries.length !== 1) {
          _this.state.removeQuery(query);
          return html.slideUp(200, function() {
            return this.remove();
          });
        }
      });
      return html;
    };

    UIManager.prototype.coverChart = function() {
      "Partially covers the chart with the 'click to refresh' message";      return $("#chart .cover").fadeIn(200);
    };

    UIManager.prototype.hideChart = function() {
      "Completely covers the chart";      $("#meta .query input").blur();
      $("#chart .cover").stop().delay(100).fadeOut(200);
      return $("#chart .white").stop().fadeIn(200);
    };

    UIManager.prototype.showChart = function() {
      "Completely uncovers the chart";      $("#chart .white").stop().fadeOut(200);
      return $("#chart .cover").stop().fadeOut(200);
    };

    UIManager.prototype.toggleCase = function() {
      "Toggles the visibility of the 'in' part of Case (in)sensitivity";      return $("#meta .settings .case .in").animate({
        width: "toggle"
      }, 150);
    };

    UIManager.prototype.dialog = function(text, title, width) {
      var box, dialog;
      if (title == null) {
        title = null;
      }
      if (width == null) {
        width = 400;
      }
      "Generates and renders a dialog box containing text and optionally a title";
      dialog = $("<div />").addClass("dialog");
      $("<div />").addClass("clear").appendTo(dialog);
      box = $("<div />").addClass("box").width(width);
      $("<div />").addClass("title").text(title).appendTo(box);
      $("<div />").addClass("x").html("&times;").appendTo(box);
      $("<div />").addClass("text").text(text).appendTo(box);
      box.appendTo(dialog);
      dialog.find(".clear").click(function() {
        return $(this).parent().fadeOut(200, function() {
          return $(this).remove();
        });
      });
      dialog.find(".x").click(function() {
        return $(this).parent().parent().fadeOut(200, function() {
          return $(this).remove();
        });
      });
      return dialog.hide().appendTo($("#dialog")).fadeIn(200);
    };

    UIManager.prototype.toggleResetZoom = function(enable) {
      if (enable) {
        return $("#reset-zoom").fadeIn(200);
      } else {
        return $("#reset-zoom").fadeOut(200);
      }
    };

    return UIManager;

  })();

  Chart = (function() {

    function Chart(data, bookworm, chartContainer) {
      var yextremes,
        _this = this;
      if (chartContainer == null) {
        chartContainer = "highchart";
      }
      this.resetZoom = __bind(this.resetZoom, this);
      this.update = __bind(this.update, this);
      this.bookworm = bookworm;
      this.chartContainer = chartContainer;
      this.chart = new Highcharts.Chart({
        chart: {
          marginBottom: 70,
          marginLeft: 70,
          marginRight: 30,
          marginTop: 10,
          animation: true,
          renderTo: this.chartContainer,
          zoomType: 'x',
          type: 'line',
          backgroundColor: 'rgba(0,0,0,0)',
          events: {
            selection: function(event) {
              event.preventDefault();
              _this.chart.xAxis[0].setExtremes(event.xAxis[0].min, event.xAxis[0].max);
              return bookworm.uiManager.toggleResetZoom(true);
            }
          }
        },
        title: {
          text: null
        },
        exporting: {
          width: 800,
          buttons: {}
        },
        lineWidth: 1,
        xAxis: {
          type: 'datetime',
          title: {
            text: null
          },
          lineWidth: 1,
          lineColor: "#CCC",
          gridLineWidth: 0,
          labels: {
            style: {
              color: "#666",
              fontFamily: "Open Sans"
            }
          }
        },
        yAxis: {
          title: {
            text: null
          },
          lineWidth: 1,
          lineColor: '#CCC',
          tickColor: '#CCC',
          min: 0,
          gridLineWidth: 0,
          endOnTick: false,
          labels: {
            style: {
              color: "#666",
              fontFamily: "Open Sans"
            }
          }
        },
        tooltip: {
          useHTML: true,
          borderRadius: 1,
          borderWidth: 1,
          borderColor: "#999",
          shadow: false,
          shared: true,
          crosshairs: [
            {
              color: "#eee"
            }
          ],
          style: {
            color: "#333",
            fontSize: "11px",
            padding: 12,
            fontFamily: "Open Sans"
          },
          formatter: function() {
            var k, str, v, _ref;
            if (bookworm.state.xAxis.unit === "year" || bookworm.state.xAxis.unit === "date_year") {
              str = '<b>' + Highcharts.dateFormat('%Y', this.points[0].x) + '</b><br/>';
            } else if (bookworm.state.xAxis.unit === "month" || bookworm.state.xAxis.unit === "date_month") {
              str = '<b>' + Highcharts.dateFormat('%B %Y', this.points[0].x) + '</b><br/>';
            } else if (bookworm.state.xAxis.unit === "day" || bookworm.state.xAxis.unit === "date_day") {
              str = '<b>' + Highcharts.dateFormat('%B %e, %Y', this.points[0].x) + '</b><br/>';
            } else {
              str = '<b>' + Highcharts.numberFormat(this.points[0].x, 0) + '</b><br/>';
            }
            _ref = this.points;
            for (k in _ref) {
              v = _ref[k];
              str += '<div class="color" style="background-color: ' + v.series.color + ';"></div>' + v.series.name + ': ' + v.y + "<br/>";
            }
            return str;
          }
        },
        legend: {
          enabled: false
        },
        series: data,
        plotOptions: {
          line: {
            animation: true,
            shadow: false,
            lineWidth: 1.5,
            marker: {
              enabled: false,
              symbol: 'circle',
              radius: 3
            },
            states: {
              hover: {
                lineWidth: 2.5,
                marker: {
                  enabled: true
                }
              }
            }
          },
          series: {
            cursor: 'pointer',
            turboThreshold: 1500,
            events: {
              click: null
            }
          }
        },
        point: {},
        exporting: {
          buttons: {
            exportButton: {
              enabled: false,
              menuItems: [
                {
                  text: 'Export to PNG',
                  onclick: function() {
                    return this.exportChart({
                      width: 800,
                      height: 600
                    });
                  }
                }, {
                  text: 'Export raw data',
                  onclick: function() {
                    $("#export-data .results").text(currentData);
                    return makeOverlay($("#export-data"));
                  }
                }, null, null
              ]
            },
            printButton: {
              enabled: false
            }
          }
        }
      });
      yextremes = this.chart.yAxis[0].getExtremes();
      this.chart.yAxis[0].setExtremes(0, yextremes.dataMax * (($("#chart").height() - 70) / ($("#chart").height() - 90 - $("#meta").height())), true, false);
    }

    Chart.prototype.update = function(data) {
      var series, x, yextremes, _i, _len;
      while (this.chart.series.length !== 0) {
        this.chart.series[0].remove();
      }
      if (this.bookworm.state.xAxis.unit === "int") {
        this.chart.xAxis[0].setCategories((function() {
          var _i, _ref, _results;
          _results = [];
          for (x = _i = 0, _ref = data[0].data.length; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
            _results.push(x);
          }
          return _results;
        })());
      } else {
        this.chart.xAxis[0].setCategories(null);
      }
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        series = data[_i];
        this.chart.addSeries(series, false);
      }
      this.chart.redraw();
      yextremes = this.chart.yAxis[0].getExtremes();
      return this.chart.yAxis[0].setExtremes(0, yextremes.dataMax * (($("#chart").height() - 70) / ($("#chart").height() - 90 - $("#meta").height())), true);
    };

    Chart.prototype.resetZoom = function() {
      return this.chart.xAxis[0].setExtremes(null, null);
    };

    return Chart;

  })();

  Bookworm = (function() {

    function Bookworm() {
      this.toggleCase = __bind(this.toggleCase, this);
      var _this = this;
      this.colorManager = new ColorManager();
      this.apiManager = new APIManager();
      $.when(this.apiManager.getOptions()).done(function(options) {
        var optionUI, query, _fn, _i, _j, _len, _len1, _ref, _ref1;
        options = _this.apiManager.processOptions(options, _this.colorManager);
        console.log(options);
        _this.metadata = options.metadata;
        _this.state = new State(options.settings.dbname, options.xOptions[0]);
        _ref = options["queries"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          query = _ref[_i];
          _this.state.addQuery(query);
        }
        _this.uiManager = new UIManager(_this, _this.state, options.xOptions);
        _this.uiManager.setHeader(options.settings.sourceName, options.settings.sourceURL, options.settings.itemName);
        _this.uiManager.setXDateLabel(options.xOptions[0].name);
        $.when(_this.apiManager.getCounts(_this.state)).done(function(counts) {
          $("#header, #meta, #chart").fadeIn(250);
          _this.chart = new Chart(_this.apiManager.processCounts(_this.state, counts), _this);
          return $("#reset-zoom").click(function() {
            _this.chart.resetZoom();
            return _this.uiManager.toggleResetZoom(false);
          });
        });
        _ref1 = options.xOptions;
        _fn = function(state, uiManager) {
          var x,
            _this = this;
          x = xOption;
          return optionUI.click(function() {
            state.xAxis = x;
            state.xRange = x.range;
            uiManager.selectXOption(x);
            return $("#chart .cover").click();
          });
        };
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          xOption = _ref1[_j];
          optionUI = _this.uiManager.addXOption(xOption);
          _fn(_this.state, _this.uiManager);
        }
        $("#meta .settings .case").click(_this.toggleCase);
        $("#meta").click(function() {
          _this.state.state = "changing";
          return _this.uiManager.coverChart();
        });
        $("#chart .x-axis .selector").click(function() {
          return _this.uiManager.showXOptions();
        });
        $(document).keypress(function(e) {
          if (e.which === 13 && _this.state.state === "changing") {
            return $("#chart .cover").click();
          }
        });
        return $("#chart .cover").click(function() {
          _this.state.state = "loading";
          _this.uiManager.hideChart();
          return $.when(_this.apiManager.getCounts(_this.state)).done(function(counts) {
            if (_this.state.state !== "changing") {
              _this.uiManager.showChart();
              _this.chart.update(_this.apiManager.processCounts(_this.state, counts));
              return _this.state.state = "loaded";
            }
          });
        });
      });
    }

    Bookworm.prototype.toggleCase = function() {
      this.state.caseSensitive = !this.state.caseSensitive;
      return this.uiManager.toggleCase();
    };

    return Bookworm;

  })();

  $.when(windowLoaded.promise()).done(function() {});

  bookworm = null;

  $(window).load(function() {
    bookworm = new Bookworm();
    return windowLoaded.resolve("done");
  });

  $(function() {});

}).call(this);
